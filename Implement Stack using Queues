/*
LeetCode 225:
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

Solution:
Language: C++
Tag: stack queue
*/

class MyStack {
private:
    // 1. two queues
    queue<int> que1;
    queue<int> que2;
    int top1;
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        // 1. O(1) time
        que1.push(x);
        top1 = x;
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        // 1. O(n) time
        while (que1.size() > 1) {
            top1 = que1.front();
            que2.push(top1);
            que1.pop();
            
        }
        int tmp = que1.front();
        que1.pop();
        swap(que1, que2); // ????
        return tmp;
    }
    
    /** Get the top element. */
    int top() {
        // 1. O(1) time 
        return top1;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return (que1.empty() && que2.empty());
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
