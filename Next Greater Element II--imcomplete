/*
LeetCode 503:
Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.

Example 1:
Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number; 
The second 1's next greater number needs to search circularly, which is also 2.
Note: The length of given array won't exceed 10000.

Solution:
Language: C++
Tag: stack
*/

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        /*
        // 1. brute force -- O(n^2) time + O(1) space
        vector<int> res;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j < nums.size(); ++j) {
                if (nums[j] > nums[i]) {
                    res.push_back(nums[j]);
                    break;
                }
            }
            if (res.size() == i + 1) {
                continue;
            }
            for (int j = 0; j < i; ++j) {
                if (nums[j] > nums[i]) {
                    res.push_back(nums[j]);
                    break;
                }
            }
            if (res.size() == i + 1) {
                continue;
            }
            res.push_back(-1);
        }
        return res;
        */
        
        /*
        // 2. modified of 1
        vector<int> res;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j % nums.size() != i; ++j) {
                if (nums[j % nums.size()] > nums[i]) {
                    res.push_back(nums[j % nums.size()]);
                    break;
                }
            }
            if (res.size() != i + 1) {
                res.push_back(-1);
            }
        }
        return res;
        */
        
        // 3. stack
    }
};
