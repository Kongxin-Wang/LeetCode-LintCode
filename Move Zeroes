/*
LeetCode 283:
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.


Solution:
Language: C++
Tag: 2Pointer 
*/

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        /*
        // 1. two pointer -- O(n) time + O(1) space + O(n) operations -- worst case: [0, 0, 0, 0, .... 1]
        int idx = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) {
                nums[idx++] = nums[i];
            }
        }
        while (idx < nums.size()) {
            nums[idx++] = 0;
        }
        */
        
        // 2. two pointer -- O(n) time + O(1) space -- O(# of non-zeros) operations
            //All elements before the slow pointer are non-zeroes.
            //All elements between the current and slow pointer are zeroes.
        int idx = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) {
                swap(nums[idx++], nums[i]);
            }
        }
    }
};
