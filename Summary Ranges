/*
LeetCode 228:
Given a sorted integer array without duplicates, return the summary of its ranges.

Example 1:
Input: [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Example 2:
Input: [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]

Solution:
Language: C++
Tag: 2Pointer
*/

class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        if (nums.empty()) {
            return vector<string>();
        }
        /*
        // 1. O(n) time + O(1) space
        vector<string> res;
        int start = 0, size = nums.size();
        for (int i = 1; i < size; ++i) {
            if (nums[i] != nums[i - 1] + 1) {
                if (i - 1 == start) {
                    res.push_back(to_string(nums[start]));
                } else {
                    string tmp = to_string(nums[start]) + "->" + to_string(nums[i - 1]);
                    res.push_back(tmp);    
                }
                start = i;
            }
        }
        if (start == size - 1) {
            res.push_back(to_string(nums[start]));
        } else {
            string tmp = to_string(nums[start]) + "->" + to_string(nums[size - 1]);
            res.push_back(tmp); 
        }
        return res;
        */
        
        // 2. two pointer -- O(n) time + O(1) space
        int start = 0, size = nums.size();
        vector<string> res;
        while (start < size) {
            int end = start + 1;
            while (end < size && nums[end] == nums[end - 1] + 1) {
                ++end;
            }
            if (end - start == 1) {
                res.push_back(num_to_str(nums[start]));
            } else {
                string str = num_to_str(nums[start]) + "->" + num_to_str(nums[end - 1]);
                res.push_back(str);
            }
            start = end;
        }
        return res;
    }
    
    string num_to_str(int num) {
        string res = "";
        bool isPos = true;
        long x = (long)num;
        if (x < 0) {
            isPos = false;
            res += "-";
            x *= -1;
        }
        do {
            res += (x % 10 + '0'); 
            x /= 10;
        } while (x != 0);
        int start = 0, end = res.length() - 1;
        if (isPos == false) {
           ++start;
        }
        while (start < end) {
            swap(res[start++], res[end--]);
        }
        return res;
    }
};
