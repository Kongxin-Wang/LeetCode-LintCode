/*
LeetCode 232:
Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Notes:
You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).


Solution:
Language: C++
Tag: stack queue

*/

class MyQueue {
private:
    // 1. two stacks
    stack<int> Mystack1;
    stack<int> Mystack2;
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        Mystack1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int top = peek();
        Mystack2.pop();
        return top;
    }
    
    /** Get the front element. */
    int peek() {
        if (Mystack2.empty()) {
            while (!Mystack1.empty()) {
                Mystack2.push(Mystack1.top());
                Mystack1.pop();
            }
        }
        return Mystack2.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return (Mystack1.empty() && Mystack2.empty());
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
