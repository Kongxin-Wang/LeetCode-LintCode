/*
LeetCode: 48
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
Example 2:

Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]

Solution:
Language: C++
Tag: 
*/

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) {
            return;
        }
        /*
        // 1. O(n^2) time + O(n^2) space
        int n = matrix.size();
        vector<vector<int>> res(n, vector<int>(n, 0));
        int col = n - 1;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                res[j][col] = matrix[i][j];
            }
            --col;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                matrix[i][j] = res[i][j];
            }
        }
        */
        
        // 2. O(1) space + O(mn) time ????
        int n = matrix.size();
        for (int i = 0; i < n - 1; ++i) {
            for (int j = 0; j < n - i - 1; ++j) {
                swap(matrix[i][j], matrix[n - j - 1][n - i - 1]);
            }
        }
        int left = 0, right = n - 1;
        while (left < right) {
            for (int i = 0; i < n; ++i) {
                swap(matrix[left][i], matrix[right][i]);
            }
            ++left;
            --right;
        }
    }
};
