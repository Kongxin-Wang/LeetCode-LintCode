/*
LeetCode 155:
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


solution:
Language: C++
Tag: stack
*/

class MinStack {
private:
    /*
    // 1. double stacks
    stack<int> normal_stack;
    stack<int> min_stack;
    */
    
    // 2. one stack
    stack<int> myStack;
    int min_val = INT_MAX;
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        /*
        // 1. double stacks
        normal_stack.push(x);
        if (min_stack.empty() || min_stack.top() >= x) {
            min_stack.push(x);
        }
        */
        
        // 2. one stack
        if (x <= min_val) {
            myStack.push(min_val);
            min_val = x;
        }
        myStack.push(x);
    }
    
    void pop() {
        /*
        // 1. double stacks
        if (normal_stack.empty()) {
            return;
        }
        if (normal_stack.top() == min_stack.top()) {
            min_stack.pop();
        }
        normal_stack.pop();
        */
        
        // 2. one stack
        if (myStack.empty()) {
            return;
        }
        if (myStack.top() == min_val) {
            myStack.pop();
            min_val = myStack.top();
        }
        myStack.pop();
    }
    
    int top() {
        /*
        // 1. double stacks
        if (normal_stack.empty()) {
            return -1;
        }
        return normal_stack.top();
        */
        
        // 2. one stack
        if (myStack.empty()) {
            return -1;
        }
        return myStack.top();
    }
    
    int getMin() {
        /*
        // 1. double stacks
        if (min_stack.empty()) {
            return -1;
        }
        return min_stack.top();
        */
        
        // 2. one stack
        if (myStack.empty()) {
            return -1;
        }
        return min_val;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
