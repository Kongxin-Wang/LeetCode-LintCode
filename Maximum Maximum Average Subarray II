/*
Given an array consisting of n integers, find the contiguous subarray whose length is greater than or equal to k that has the maximum average value. And you need to output the maximum average value.

Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation:
when length is 5, maximum average value is 10.8,
when length is 6, maximum average value is 9.16667.
Thus return 12.75.

Note:
1 <= k <= n <= 10,000.
Elements of the given array will be in range [-10,000, 10,000].
The answer with the calculation error less than 10-5 will be accepted.
*/

class Solution {
public:
    #define min(a, b) (a < b ? a : b)
    #define max(a, b) (a > b ? a : b)
    double findMaxAverage(vector<int>& nums, int k) {
        // 1. binary search -- O(nlog(max_val âˆ’ min_val)) time + O(1) space
        int min_val = INT_MAX, max_val = INT_MIN;
        for (int i = 0; i < nums.size(); ++i) {
            min_val = min(min_val, nums[i]);
            max_val = max(max_val, nums[i]);
        }
        double left = (double)min_val, right = (double)max_val, eps = 1e-5;
        while (left + eps < right) {
            double mid = (left + right) / 2;
            if (isValid(nums, k, mid) == true) {
                left = mid;
            } else {
                right = mid;
            }
        }
        return left;
    }
    
    bool isValid(vector<int> &nums, int k, double mid) {
        double *preSum = new double[nums.size() + 1];
        preSum[0] = 0.0;
        double min_pre = 0.0;
        for (int i = 0; i < nums.size(); ++i) {
            preSum[i + 1] = preSum[i] + (double)nums[i] - mid;
            if (i >= k) {
                min_pre = min(min_pre, preSum[i - k + 1]); // note: i - k + 1
            }
            if (i >= k - 1 && preSum[i + 1] - min_pre >= 0) {
                return true;
            }
        }
        return false;
    }
};
