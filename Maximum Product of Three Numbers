/*
LeetCode 628:
Given an integer array, find three numbers whose product is maximum and output the maximum product.

Example 1:
Input: [1,2,3]
Output: 6
Example 2:
Input: [1,2,3,4]
Output: 24
Note:
The length of the given array will be in range [3,104] and all elements are in the range [-1000, 1000].
Multiplication of any three numbers in the input won't exceed the range of 32-bit signed integer.

Solution:
Language: C++
Tag: sort
*/

class Solution {
public:
    #define max(a, b) (a > b ? a : b)
    int maximumProduct(vector<int>& nums) {
        /*
        // 1. brute force -- O(n^3) time + O(1) space -- Time Limit Exceed
        int res = INT_MIN, size = nums.size();
        for (int i = 0; i < size; ++i) {
            for (int j = i + 1; j < size; ++j) {
                for (int k = j + 1; k < size; ++k) {
                    int tmp = nums[i] * nums[j] * nums[k];
                    res = max(res, tmp);
                }
            }
        }
        return res;
        */
        
        if (nums.size() < 3) {
            return 0;
        }
        /*
        // 2. O(nlogn) time + O(1) space
        int size = nums.size();
        sort(nums.begin(), nums.end(), greater<int>());
            //quicksort(nums, 0, size - 1);
            //heapsort(nums);
            //int *temp = new int[size];
            //mergesort(nums, 0, size - 1, temp);
        int tmp1 = nums[0] * nums[1] * nums[2]; // all neg or all pos
        int tmp2 = nums[0] * nums[size - 1] * nums[size - 2];
        return max(tmp1, tmp2);
        */
        
        // 3. O(n) time + O(1) space ???? -- find max1, max2, max3 && min1, min2
        int min1 = INT_MAX, min2 = INT_MAX;
        int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] < min1) {
                min2 = min1; 
                min1 = nums[i];
            } else if (nums[i] < min2) {
                min2 = nums[i];
            }
            
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3) {
                max3 = nums[i];
            }
        }
        return max(max1 * min1 * min2, max1 * max2 * max3);
    }
    
    void quicksort(vector<int> &nums, int start, int end) {
        if (start >= end) {
            return;
        }
        int left = start, right = end, pivot = nums[(start + end) / 2];
        while (left <= right) {
            while (left <= right && nums[left] > pivot) {
                ++left;
            }
            while (left <= right && nums[right] < pivot) {
                --right;
            }
            if (left <= right) {
                swap(nums[left++], nums[right--]);
            }
        }
        quicksort(nums, start, right);
        quicksort(nums, left, end);
    }
    
    void mergesort(vector<int> &nums, int start, int end, int *temp) {
        if (start >= end) {
            return;
        }
        int mid = start + (end - start) / 2;
        mergesort(nums, start, mid, temp);
        mergesort(nums, mid + 1, end, temp);
        merge(nums, start, end, temp);
    }
    
    void merge(vector<int> &nums, int start, int end, int *temp) {
        int mid = start + (end - start) / 2;
        int left = start, right = mid + 1, idx = start;
        while (left <= mid && right <= end) {
            if (nums[left] >= nums[right]) {
                temp[idx++] = nums[left++];
            } else {
                temp[idx++] = nums[right++];
            }
        }
        while (left <= mid) {
            temp[idx++] = nums[left++];
        }
        while (right <= end) {
            temp[idx++] = nums[right++];
        }
        for (int i = start; i <= end; ++i) {
            nums[i] = temp[i];
        }
    }
    
    void heapsort(vector<int> &nums) {
        int size = nums.size();
        for (int i = (size - 1) / 2; i >= 0; --i) {
            siftdown(nums, i, size);
        }
        while (size > 0) {
            swap(nums[0], nums[--size]);
            siftdown(nums, 0, size);
        }
    }
    
    void siftdown(vector<int> &nums, int father, int size) {
        while (father < size) {
            int min_idx = father;
            int left = father * 2 + 1, right = father * 2 + 2;
            if (left < size && nums[left] < nums[min_idx]) {
                min_idx = left;
            }
            if (right < size && nums[right] < nums[min_idx]) {
                min_idx = right;
            }
            if (father == min_idx) {
                break;
            }
            swap(nums[father], nums[min_idx]);
            father = min_idx;
        }
    }
};
