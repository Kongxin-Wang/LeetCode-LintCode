/*
LeetCode 162:
A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.

click to show spoilers.

Note:
Your solution should be in logarithmic complexity.


Solution:
Language: C++
Tag: Binary Search
*/

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if (nums.empty()) {
            return -1;
        }
        /*
        // 1. O(n) time + O(1) space
        int size = nums.size();
        if (size == 1 || nums[0] > nums[1]) {
            return 0;
        }
        if (nums[size - 1] > nums[size - 2]) {
            return size - 1;
        }
        int i = 1;
        while (i < size - 1) {
            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {
                break;
            }
            ++i;
        }
        return i;
        */ 
        
        // 2. binary search -- assume at least 1 peak element -- O(logn) time + O(1) space
        int start = 0, end = nums.size() - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < nums[mid - 1]) {
                end = mid;
            } else if (nums[mid] < nums[mid + 1]) {
                start = mid;
            } else {
                return mid;
            }
        }
        if (nums[start] > nums[end]) {
            return start;
        }
        return end;
    }
};
