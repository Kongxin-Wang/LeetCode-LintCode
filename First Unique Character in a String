/*
LeetCode 387:
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.


Solution:
Language: C++
Tag: hashmap

*/

class Solution {
public:
    #define min(a, b) (a < b ? a : b)
    int firstUniqChar(string s) {
        if (s.empty()) {
            return -1;
        }
        /*
        // 1. O(len^2) time + O(len) space
        unordered_set<char> hash;
        int j = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (hash.find(s[i]) != hash.end()) {
                continue;
            }
            for (j = i + 1; j < s.length(); ++j) {
                if (s[j] == s[i]) {
                    break;
                }
            }
            if (j == s.length()) {
                return i;
            }
            hash.insert(s[i]);
        }
        return -1;
        */
        
        /*
        // 2. O(n) time + O(1) space
        int *hash = new int[26];
        for(int i = 0; i < 26; ++i) {
            hash[i] = 0;
        }
        for (int i = 0; i < s.length(); ++i) {
            ++hash[s[i] - 'a'];
        }
        for (int i = 0; i < s.length(); ++i) {
            if (hash[s[i] - 'a'] == 1) {
                return i;
            }
        }
        return -1;
        */
        
        /*
        // 3. O(n) time + O(n) space
        unordered_map<char, int>hashmap;
        for (int i = 0; i < s.length(); ++i) {
            if (hashmap.find(s[i]) == hashmap.end()) {
                hashmap[s[i]] = 1;
            } else {
                ++hashmap[s[i]];
            }
        }
        for (int i = 0; i < s.length(); ++i) {
            if (hashmap[s[i]] == 1) {
                return i;
            }
        }
        return -1;
        */
        
        // 4. O(n) time + O(n) space
        unordered_map<char, pair<int, int>> hashmap; // count index
        for (int i = 0; i < s.length(); ++i) {
            if (hashmap.find(s[i]) == hashmap.end()) {
                hashmap[s[i]] = {1, i};
            } else {
                ++hashmap[s[i]].first;
            }
        }
        int res = s.length();
        for (pair<char, pair<int, int>> item : hashmap) {
            if (item.second.first == 1) {
                res = min(res, item.second.second);
            }
        }
        return (res == s.length() ? -1 : res);
    }
};
