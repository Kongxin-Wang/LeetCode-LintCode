/*
LeetCode 119:
Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?

Solution:
Language: C++
Tag: 
*/

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        if (rowIndex < 0) {
            return vector<int>();
        }
        /*
        // 1. O(k^2) space
        vector<vector<int>> res;
        for (int i = 0; i <= rowIndex; ++i) {
            vector<int> curRow(i + 1, 1);
            for (int j = 1; j < i; ++j) { // curRow[0] = 1 = curRow[i]
                curRow[j] = res[i - 1][j - 1] + res[i - 1][j];
            }
            res.push_back(curRow);
        }
        return res[rowIndex];
        */
        
        /*
        // 2. O(k) space
        vector<vector<int>> res(2, vector<int>(rowIndex + 1, 1));
        for (int i = 0; i <= rowIndex; ++i) {
            res[i % 2][0] = 1;
            res[i % 2][i] = 1;
            for (int j = 1; j < i; ++j) {
                res[i % 2][j] = res[(i - 1) % 2][j - 1] + res[(i - 1) % 2][j];
            }
        }
        return res[rowIndex % 2];
        */
        
        // 3. O(k) space
        vector<int> res(rowIndex + 1, 1);
        for (int i = 1; i <= rowIndex; ++i) {
            for (int j = i - 1; j >= 1; --j) {
                res[j] += res[j - 1];
            }
        }
        return res;
    }
};
