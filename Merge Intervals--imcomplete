/*
LeetCode 56:
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].


Solution:
Language: C++
Tag: sort
*/

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

bool myCMP(Interval &x, Interval &y) {
    if (x.start == y.start) {
        return x.end < y.end;
    }
    return x.start < y.start;
}

class Solution {
public:
    #define max(a, b) (a > b ? a : b)
    vector<Interval> merge(vector<Interval>& intervals) {
        if (intervals.empty()) {
            return vector<Interval>();
        }
        
        /*
        // 1. sort -- O(nlogn) time + O(1) space
        //sort(intervals.begin(), intervals.end(), myCMP);
        sort(intervals.begin(), intervals.end(), [](Interval &x, Interval &y){return x.start < y.start;});
        vector<Interval> res;
        Interval tmp = intervals[0];
        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i].start <= tmp.end) {
                tmp.end = max(tmp.end, intervals[i].end);
            } else {
                res.push_back(tmp);
                tmp = intervals[i];
            }
        }
        res.push_back(tmp);
        return res;
        */
        
        // 2. connected components ?????
    }
};
