/*
LeetCode 33:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.


Solution:
Language: C++
Tag: Binary Search
hint: no duplicate
*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        /*
        // 1. O(n) time + O(1) space
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == target) {
                return i;
            }
        }
        return -1;
        */
        
        /*
        // 2. binary search<no duplicate> ---- O(logn) time<twice> + O(1) space
        if (nums.empty()) {
            return -1;
        }
            // find min
        int start = 0, end = nums.size() - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < nums[end]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        int min_idx = 0;
        if (nums[start] < nums[end]) {
            min_idx = start;
        } else {
            min_idx = end;
        }
        int left = binary_search(nums, 0, min_idx - 1, target);
        if (left != -1) {
            return left;
        }
        int right = binary_search(nums, min_idx, nums.size() - 1, target);
        if (right != -1) {
            return right;
        }
        return -1;
        */
        
        /*
        // 3. binary search -- O(logn) time + O(1) space
        if (nums.empty()) {
            return -1;
        }
        int start = 0, end = nums.size() - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (target > nums[end]) {
                if (nums[mid] <= nums[end] || nums[mid] > target) {
                    end = mid;
                } else if (nums[mid] > nums[end] && nums[mid] <= target) {
                    start = mid;
                }
            } else {
                if (nums[mid] > nums[end] || nums[mid] <= target) {
                    start = mid;
                } else if (nums[mid] > target && nums[mid] <= nums[end]) {
                    end = mid;
                }
            }
        }
        if (nums[start] == target) {
            return start;
        }
        if (nums[end] == target) {
            return end;
        }
        return -1;
        */
        
        // 4. binary search -- O(logn) time + O(1) space
        if (nums.empty()) {
            return -1;
        }
        int start = 0, end = nums.size() - 1;
        int key = nums[end];
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (target > key) {
                if (nums[mid] > key && nums[mid] < target) {
                    start = mid;
                } else {
                    end = mid;
                }
            } else {
                if (nums[mid] <= key && nums[mid] >= target) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
        }
        if (nums[start] == target) {
            return start;
        }
        if (nums[end] == target) {
            return end;
        }
        return -1;
    }
    
    int binary_search(vector<int> &nums, int start, int end, int target) {
        if (start > end) {
            return -1;
        }
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < target) {
                start = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                return mid;
            }
        }
        if (nums[start] == target) {
            return start;
        }
        if (nums[end] == target) {
            return end;
        }
        return -1;
    }
};
