/*
LeetCode: 303
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.


Solution:
Language: C++
Tag: PreSum Design
*/

class NumArray {
private:
    // 1. preSum 
    int *preSum;
public:
    NumArray(vector<int> nums) {
        // 1. preSum -- O(n) time + O(n) space
        preSum = new int[nums.size() + 1];
        preSum[0] = 0;
        for (int i = 0; i < nums.size(); ++i) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
    }
    
    int sumRange(int i, int j) {
        // 1. preSum -- O(1) time
        return preSum[j + 1] - preSum[i];
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.sumRange(i,j);
 */
