/*
LeetCode 696:
Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.

Example 1:
Input: "00110011"
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01".

Notice that some of these substrings repeat and are counted the number of times they occur.

Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.
Example 2:
Input: "10101"
Output: 4
Explanation: There are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1's and 0's.
Note:

s.length will be between 1 and 50,000.
s will only consist of "0" or "1" characters.

Solutions:
Language: C++
Tag: 2Pointer
hint: need to be consecutive
*/

class Solution {
public:
    #define min(a, b) (a < b ? a : b)
    int countBinarySubstrings(string s) {
        /*
        // 1. brute force -- O(size^2) time + O(1) space -- time limit exceed
        int res = 0, size = s.length();
        int i = 0;
        while (i < size) {
            int j = i;
            while (j < size && s[j] == s[i]) {
                ++j;
            }
            int tmp = j - i;
            while (j < size && s[j] != s[i]) {
                ++j;
            }
            if (j - i >= 2 * tmp) {
                ++res;
            }
            ++i;
        }
        return res;
        */
        
        // 2. like 2P: O(size) time + O(1) space -- since consecutive
        int res = 0, size = s.length();
        int i = 0, num = 0;
        while (i < size) {
            char val = s[i];
            int idx = i;
            while (i < size && s[i] == val) {
                ++i;
            }
            int tmp = i - idx;
            res += min(tmp, num);
            num = tmp;
        }
        return res;
    }
};
