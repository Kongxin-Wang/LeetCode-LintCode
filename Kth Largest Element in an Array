/*
LeetCode 215:
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.

Solution:
Language: C++
Tag: partition sort
*/

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if (k <= 0 || k > nums.size()) {
            return -1;
        }
        /*
        // 1. sort -- O(nlogn) time + O(1) space
        sort(nums.begin(), nums.end(), greater<int>());
        return nums[k - 1];
        */
        
        
        // 2. quickselect -- O(n) time + O(1) space
        return quickselect(nums, 0, nums.size() - 1, k);
    }
    
    int quickselect(vector<int> &nums, int start, int end, int k) {
        if (start == end) {
            return nums[start];
        }
        int left = start, right = end, pivot = nums[(start + end) / 2];
        while (left <= right) {
            while (left <= right && nums[left] > pivot) {
                ++left;
            }
            while (left <= right && nums[right] < pivot) {
                --right;
            }
            if (left <= right) {
                swap(nums[left++], nums[right--]);
            }
        }
        if (k <= right - start + 1) {
            return quickselect(nums, start, right, k);
        }
        if (k > left - start) {
            return quickselect(nums, left, end, k - (left - start));
        }
        return nums[right + 1];
    }
};
