/*
LeetCode 7:
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output:  321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


Solution:
Language: C++
Tag: 
*/

class Solution {
public:
    int reverse(int x) {
        /*
        //  1. use long
        long num = (long)x;
        bool flag = true;
        if (num < 0) {
            flag = false;
            num *= -1;
        }
        long res = 0;
        while (num != 0) {
            res = res * 10 + (num % 10);
            num /= 10;
        }
        if (flag == false) {
            res *= -1;
        }
        if (res < INT_MIN || res > INT_MAX) {
            return 0;
        }
        return (int)res;
        */
        
        // 2. 
        if (x == INT_MIN) {
            return 0;
        }
        bool flag = true;
        if (x < 0) {
            flag = false;
            x *= -1;
        }
        int res = 0;
        while (x != 0) {
            int tmp = res * 10 + (x % 10);
            if ((tmp - (x % 10)) / 10 != res) {
                return 0;
            }
            res = tmp;
            x /= 10;
        }
        if (flag == true) {
            return res;
        }
        return (res * -1);
    }
};
