/*
LeetCode 645:
The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.

Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]
Note:
The given array size will in the range [2, 10000].
The given array's numbers won't have any order.


Solution:
Language: C
Tag: hashmap sort

*/

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findErrorNums(int* nums, int numsSize, int* returnSize) {
    /*
    // 1. O(n) time + O(1) space
    *returnSize = 2;
    int *res = (int*)malloc(sizeof(int) * (*returnSize));
    int tmp = 0;
    for (int i = 0; i < numsSize; ++i) {
        tmp ^= nums[i];
        tmp ^= (i + 1);
    }
    for (int i = 0; i < numsSize; ++i) {
        int idx = abs(nums[i]) - 1;
        if (nums[idx] < 0) {
            res[0] = idx + 1;
            break;
        } else {
            nums[idx] *= -1; 
        }
    }
    res[1] = res[0] ^ tmp;
    return res;
    */
    
    /*
    // 2. O(n) time + O(1) space
    *returnSize = 2;
    int *res = (int*)malloc(sizeof(int) * (*returnSize));
    int tmp = 0, i = 0;
    for (i = 0; i < numsSize; ++i) {
        tmp ^= nums[i];
        tmp ^= (i + 1);
    }
    i = 0;
    while (i < numsSize) {
        if (nums[i] != nums[nums[i] - 1]) {
            int tmp1 = nums[i];
            nums[i] = nums[tmp1 - 1];
            nums[tmp1 - 1] = tmp1;
        } else {
            ++i;
        }
    }
    for (int i = 0; i < numsSize; ++i) {
        if (nums[i] != i + 1) {
            res[0] = nums[i];
            break;
        }
    }
    res[1] = tmp ^ res[0];
    return res;
    */
    
    /*
    // 3. brute force -- O(n^2) time + O(1) space
    int miss = -1, dup = -1;
    for (int i = 1; i <= numsSize; ++i) {
        int count = 0;
        for (int j = 0; j < numsSize; ++j) {
            if (nums[j] == i) {
                ++count;
            }
        }
        if (count == 0) {
            miss = i;
        } else if (count == 2) {
            dup = i;
        }
        if (miss != -1 && dup != -1) {
            break;
        }
    }
    *returnSize = 2;
    int *res = (int*)malloc(sizeof(int) * (*returnSize));
    res[0] = dup;
    res[1] = miss;
    return res;
    */
    
    /*
    // 4. sort -- O(nlogn) time + O(1) space
    *returnSize = 2;
    int *res = (int*)malloc(sizeof(int) * (*returnSize));
    res[1] = 1; // important -- the followint don't judge whether 1 is missing
    quicksort(nums, 0, numsSize - 1);
    //mergesort(nums, 0, numsSize - 1, temp);
    //int *temp = (int*)malloc(sizeof(int) * numsSize);
    //mergesort(nums, 0, numsSize - 1, temp);
    //free(temp);
    for (int i = 1; i < numsSize; ++i) {
        if (nums[i] == nums[i - 1]) {
            res[0] = nums[i];
        } else if (nums[i] > nums[i - 1] + 1) {
            res[1] = nums[i - 1] + 1;
        }
    }
    if (nums[numsSize - 1] != numsSize) {
        res[1] = numsSize;
    }
    return res;
    */
    
    // 5. O(n) time + O(n) space
    int *temp = (int*)malloc(sizeof(int) * numsSize);
    memset(temp, 0, sizeof(int) * numsSize);
    for (int i = 0; i < numsSize; ++i) {
        ++temp[nums[i] - 1];
    }
    *returnSize = 2;
    int *res = (int*)malloc(sizeof(int) * (*returnSize));
    for (int i = 0; i < numsSize; ++i) {
        if (temp[i] == 0) {
            res[1] = i + 1;
        } else if (temp[i] == 2) {
            res[0] = i + 1;
        }
    }
    return res;
    
    /*
    // 6. O(n) time + O(1) space
    int tmp = 0;
    for (int i = 0; i < numsSize; ++i) {
        tmp ^= nums[i];
        tmp ^= (i + 1);
    }
    int rightmost = tmp & (~(tmp - 1));
    int res1 = 0, res2 = 0;
    for (int i = 0; i < numsSize; ++i) {
        if ((nums[i] & rightmost) != 0) {
            res1 ^= nums[i];
        } else {
            res2 ^= nums[i];
        }
        if (((i + 1) & rightmost) != 0) {
            res1 ^= (i + 1);
        } else {
            res2 ^= (i + 1);
        }
    }
    *returnSize = 2;
    int *res = (int*)malloc(sizeof(int) * (*returnSize));
    for (int i = 0; i < numsSize; ++i) {
        if (nums[i] == res1) {
            res[0] = res1;
            res[1] = res2;
            return res;
        }
    }
    res[0] = res2;
    res[1] = res1;
    return res;
    */
}

void quicksort(int *nums, int start, int end) {
    while (start >= end) {
        return;
    }
    int left = start, right = end, pivot = nums[(start + end) / 2];
    while (left <= right) {
        while (left <= right && nums[left] < pivot) {
            ++left;
        }
        while (left <= right && nums[right] > pivot) {
            --right;
        }
        if (left <= right) {
            int tmp = nums[left];
            nums[left++] = nums[right];
            nums[right--] = tmp;
        }
    }
    quicksort(nums, start, right);
    quicksort(nums, left, end);
}

void heapsort(int *nums, int numsSize) {
    int size = numsSize;
    for (int i = (size - 1) / 2; i >= 0; --i) {
        siftdown(nums, i, size);
    }
    while (size > 0) {
        swap(nums, 0, --size);
        siftdown(nums, 0, size);
    }
    int left = 0, right = numsSize - 1;
    while (left < right) {
        swap(nums, left++, right--);
    }
}

void siftdown(int *nums, int father, int size) {
    while (father < size) {
        int min_idx = father;
        int left = father * 2 + 1, right = father * 2 + 2;
        if (left < size && nums[left] < nums[min_idx]) {
            min_idx = left;
        }
        if (right < size && nums[right] < nums[min_idx]) {
            min_idx = right;
        }
        if (father == min_idx) {
            break;
        }
        swap(nums, father, min_idx);
        father = min_idx;
    }
}

void swap(int *nums, int i, int j) {
    int tmp = nums[i];
    nums[i] = nums[j];
    nums[j] = tmp;
}

void mergesort(int *nums, int start, int end, int *temp) {
    if (start >= end) {
        return;
    }
    int mid = start + (end - start) / 2;
    mergesort(nums, start, mid, temp);
    mergesort(nums, mid + 1, end, temp);
    merge(nums, start, end, temp);
}

void merge(int *nums, int start, int end, int *temp) {
    int mid = start + (end - start) / 2;
    int left = start, right = mid + 1, idx = start;
    while (left <= mid && right <= end) {
        if (nums[left] <= nums[right]) {
            temp[idx++] = nums[left++];
        } else {
            temp[idx++] = nums[right++];
        }
    }
    while (left <= mid) {
        temp[idx++] = nums[left++];
    }
    while (right <= end) {
        temp[idx++] = nums[right++];
    }
    for (int i = start; i <= end; ++i) {
        nums[i] = temp[i];
    }
}
