/*
LeetCode 561:
Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Example 1:
Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).
Note:
n is a positive integer, which is in the range of [1, 10000].
All the integers in the array will be in the range of [-10000, 10000].


Solution:
Language: C++
Tag: sort 
hint: gather small nums together, groups of 2
*/

class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        /*
        // 1. sort -- O(nlogn) time + O(1) space
        sort(nums.begin(), nums.end(), less<int>());
        //quicksort(nums, 0, nums.size() - 1);
        //heapsort(nums);
        //int *temp = new int[nums.size()];
        //mergesort(nums, 0, nums.size() - 1, temp);
        int res = 0;
        for (int i = 0; i < nums.size(); i += 2) {
            res += nums[i];
        }
        return res;
        */
        
        // 2. use extra array ???? -- O(n) time + O() space [-10000, 10000].
        int off_set = 10000;
        int size = 20001;
        int *hash = new int[size];
        for (int i = 0; i < size; ++i) {
            hash[i] = 0;
        }
        for (int i = 0; i < nums.size(); ++i) {
            ++hash[nums[i] + off_set];
        }
        int res = 0;
        int left = 0; // ***
        for (int i = 0; i < size; ++i) {
            if (hash[i] == 0) {
                continue;
            }
            if (left == 0) {
                res += (hash[i] + 1) / 2 * (i - off_set);
            } else {
                res += hash[i] / 2 * (i - off_set);
            }
            left = (left + hash[i]) % 2;
        }
        return res;
    }
    
    void quicksort(vector<int> &nums, int start, int end) {
        if (start >= end) {
            return;
        }
        int left = start, right = end, pivot = nums[(start + end) / 2];
        while (left <= right) {
            while (left <= right && nums[left] < pivot) {
                ++left;
            }
            while (left <= right && nums[right] > pivot) {
                --right;
            }
            if (left <= right) {
                swap(nums[left++], nums[right--]);
            }
        }
        quicksort(nums, start, right);
        quicksort(nums, left, end);
    }
    
    void mergesort(vector<int> &nums, int start, int end, int *temp) {
        if (start >= end) {
            return;
        }
        int mid = start + (end - start) / 2;
        mergesort(nums, start, mid, temp);
        mergesort(nums, mid + 1, end, temp);
        merge(nums, start, end, temp);
    }
    
    void merge(vector<int> &nums, int start, int end, int *temp) {
        int mid = start + (end - start) / 2;
        int left = start, right = mid + 1, idx = start;
        while (left <= mid && right <= end) {
            if (nums[left] <= nums[right]) {
                temp[idx++] = nums[left++];
            } else {
                temp[idx++] = nums[right++];
            }
        }
        while (left <= mid) {
            temp[idx++] = nums[left++];
        }
        while (right <= end) {
            temp[idx++] = nums[right++];
        }
        for (int i = start; i <= end; ++i) {
            nums[i] = temp[i];
        }
    }
    
    void heapsort(vector<int> &nums) {
        int size = nums.size();
        for (int i = (size - 1) / 2; i >= 0; --i) {
            siftdown(nums, i, size);
        }
        while (size > 0) {
            swap(nums[0], nums[--size]);
            siftdown(nums, 0, size);
        }
        int left = 0, right = nums.size() - 1;
        while (left < right) {
            swap(nums[left++], nums[right--]);
        }
    }
    
    void siftdown(vector<int> &nums, int father, int size) {
        while (father < size) {
            int min_idx = father;
            int left = father * 2 + 1, right = father * 2 + 2;
            if (left < size && nums[left] < nums[min_idx]) {
                min_idx = left;
            }
            if (right < size && nums[right] < nums[min_idx]) {
                min_idx = right;
            }
            if (father == min_idx) {
                break;
            }
            swap(nums[father], nums[min_idx]);
            father = min_idx;
        }
    }
};
