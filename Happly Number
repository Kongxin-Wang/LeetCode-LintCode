/*
LeetCode 202:
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


Solution:
Language: C++
Tag: 2Pointer(fast & slow)
*/

class Solution {
public:
    bool isHappy(int n) {
        /*
        // 1. O() space + O() time
        if (n <= 0) {
            return false;
        }
        unordered_set<int> hash;
        while (n != 1) {
            if (hash.find(n) != hash.end()) {
                return false;
            } 
            hash.insert(n);
            int tmp = 0;
            while (n != 0) {
                int rem = n % 10;
                tmp += rem * rem;
                n /= 10;
            }
            n = tmp;
        }
        return true;
        */
        
        /*
        // 2. 1-yes, 2-(4, 16, 37, 58, 89, 145, 42, 20, 4)-no, 3-(9, 81, 65, 61, 37)-no, 4-no, 5-(25, 29, 85, 89)-no
            // 6-(36, 45, 41, 17, 50, 25)-no, 7-(49, 97, 130, 10, 1)-yes
        if (n <= 0) {
            return false;
        }
        while (n != 1) {
            if (n == 4) { // ???
                return false;
            }
            int tmp = 0;
            while (n != 0) {
                int rem = n % 10;
                tmp += rem * rem;
                n /= 10;
            }
            n = tmp;
        }
        return true;
        */
        
        // 3. fast slow -- two pointer
        if (n <= 0) {
            return false;
        }
        int slow = n, fast = n;
        do {
            slow = cal(slow);
            fast = cal(fast);
            fast = cal(fast);
        } while (fast != slow);
        return (fast == 1);
    }
    
    int cal(int n) {
        int tmp = 0;
        while (n != 0) {
            int rem = n % 10;
            tmp += rem * rem;
            n /= 10;
        }
        return tmp;
    }
};
