/*
LeetCode 53:
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.



Solution:
Language: C++
Tag: DP PreSum

*/

class Solution {
public:
    #define max(a, b) (a > b ? a : b)
    #define min(a, b) (a < b ? a : b)
    int maxSubArray(vector<int>& nums) {
        /*
        // 1. preSum -- O(1) space + O(n) time
        int max_val = INT_MIN;
        int sum = 0, min_val = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
            max_val = max(max_val, sum - min_val);
            min_val = min(min_val, sum);
        }
        return max_val;
        */
        
        /*
        // 2. DP -- O(n) space + O(n) time
        int size = nums.size();
            //f[i]: the max subarray sum ends in nums[i - 1] in nums[0, 1, ..., i - 1];
        int *f = new int[size + 1];
        f[0] = 0;
        int max_val = INT_MIN;
        for (int i = 1; i <= size; ++i) {
            f[i] = (f[i - 1] > 0 ? (f[i - 1] + nums[i - 1]) : nums[i - 1]);
            max_val = max(max_val, f[i]);
        }
        return max_val;
        */
        
        /*
        // 3. rolling pointer of 2 -- O(n) time + O(1) space
        int *f = new int[2];
        f[0] = 0;
        int max_val = INT_MIN;
        for (int i = 1; i <= nums.size(); ++i) {
            f[i % 2] = (f[(i - 1) % 2] > 0 ? (f[(i - 1) % 2] + nums[i - 1]) : nums[i - 1]);
            max_val = max(max_val, f[i % 2]);
        }
        return max_val;
        */
        
        // 4. Divide & Conquer ??? -- O(nlogn)time + O(1) space
        if (nums.empty()) {
            return 0;
        }
        return helper(nums, 0, nums.size() - 1);
    }
    
    int helper(vector<int> &nums, int left, int right) {
        if (left == right) {
            return nums[left];
        }
        int mid = left + (right - left) / 2;
        int leftSum = helper(nums, left, mid);
        int rightSum = helper(nums, mid + 1, right);
        int midSum = calMid(nums, left, right);
        return max(midSum, max(leftSum, rightSum));
    }
    
    int calMid(vector<int> &nums, int left, int right) {
        int mid = left + (right - left) / 2;
        int leftSum = INT_MIN, rightSum = INT_MIN;
        int sum = 0;
        for (int i = mid; i >= left; --i) {
            sum += nums[i];
            leftSum = max(leftSum, sum);
        }
        sum = 0;
        for (int i = mid + 1; i <= right; ++i) {
            sum += nums[i];
            rightSum = max(rightSum, sum);
        }
        return (leftSum + rightSum);
    }
};
