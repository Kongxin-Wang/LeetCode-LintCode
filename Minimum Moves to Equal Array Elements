/*
LeetCode 453:
Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.

Example:

Input:
[1,2,3]

Output:
3

Explanation:
Only three moves are needed (remember each move increments two elements):

[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

*/

class Solution {
public:
    #define min(a, b) (a < b ? a : b)
    #define max(a, b) (a > b ? a : b)
    int minMoves(vector<int>& nums) {
        /*
        // 1. Time Limit Exceed -- O(n^2) time + O(1) space
        int min_val = INT_MAX, max_val = INT_MIN;
        int count = 0;
        do {
            getMinMax(nums, min_val, max_val);
            int steps = max_val - min_val;
            count += steps;
            bool first = true;
            for (int i = 0; i < nums.size(); ++i) {
                if (first == true && nums[i] == max_val) {
                    first = false;
                    continue;
                }
                nums[i] += steps;
            }
        } while (max_val != min_val);
        return count;
        */
        
        /*
        // 2. sort -- O(nlogn) time + O(1) space
        sort(nums.begin(), nums.end(), less<int>());
        int count = 0;
        for (int i = nums.size() - 1; i > 0; --i) {
            count += (nums[i] - nums[0]);
        }
        return count;
        */
        
        /*
        // 3. Math -- adding 1 to all the elements except one is equivalent to decrementing 1 from a single element
                // -- O(n) time + O(1) space + two passes
        int min_idx = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] < nums[min_idx]) {
                min_idx = i;
            }
        }
        int count = 0;
        for (int i = 0; i < nums.size(); ++i) {
            count += (nums[i] - nums[min_idx]);
        }
        return count;
        */
        
        // 4. modify of 3 -- O(n) time + O(1) space + one pass
        int min_idx = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] < nums[min_idx]) {
                min_idx = i;
            }
            count += nums[i]; // may cause integer overflow if possible
        }
        return (count - nums[min_idx] * nums.size());
    }
    
    void getMinMax(vector<int> &nums, int &min_val, int &max_val) {
        min_val = INT_MAX;
        max_val = INT_MIN;
        for (int i = 0; i < nums.size(); ++i) {
            min_val = min(min_val, nums[i]);
            max_val = max(max_val, nums[i]);
        }
    }
};
