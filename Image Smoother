/*
LeetCode 661:
Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].


Solution:
Laguage: C++
Tag: 
*/

class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        // 1. O(8mn) time + O(mn) space
        int trans[8][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        int rowSize = M.size(), colSize = M[0].size();
        vector<vector<int>> res(rowSize, vector<int>(colSize, 0));
        for (int i = 0; i < rowSize; ++i) {
            for (int j = 0; j < colSize; ++j) {
                int num = 1, count = M[i][j];
                for (int k = 0; k < 8; ++k) {
                    int row = i + trans[k][0];
                    int col = j + trans[k][1];
                    if (!inbound(row, col, rowSize, colSize)) {
                        continue;
                    }
                    ++num;
                    count += M[row][col];
                }
                res[i][j] = count / num;
            }
        }
        return res;
    }
    
    bool inbound(int row, int col, int rowSize, int colSize) {
        if (row >= 0 && row <rowSize && col >= 0 && col < colSize) {
            return true;
        }
        return false;
    }
};
