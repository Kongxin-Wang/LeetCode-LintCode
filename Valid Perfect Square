/*
LeetCode 367:
Given a positive integer num, write a function which returns True if num is a perfect square else False.

Note: Do not use any built-in library function such as sqrt.

Example 1:

Input: 16
Returns: True
Example 2:

Input: 14
Returns: False

Solution:
Language: C++
Tag: binary search
*/

class Solution {
public:
    bool isPerfectSquare(int num) {
        /*
        // 1. brute force -- Time Limit Exceed -- O(n) time
        for (int i = 1; i * i <= num; ++i) {
            if (i * i == num) {
                return true;
            }
        }
        return false;
        */
        
        /*
        // 2. binary search -- O(log(n)) time
        int start = 1, end = num;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            long square = (long)mid * (long)mid;
            if (square > (long)num) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (start * start == num || end * end == num) {
            return true;
        }
        return false;
        */
        
        // 3. The square of nth positive integer can be represented as a sum of first n odd positive integers." Or in mathematical terms -- n^2 = 1 + 3 + 5 + ... + (2*n - 1) = sum(i = 1 to n) {2 * i - 1} -- O(sqrt(n)) time
        for (int i = 1; num > 0; i += 2) {
            num -= i;
        }
        return (num == 0);
        
        // 4. NewTon's Method -- nearly O(1) time ????
    }
};
